version: "2.6"

env:
  DOTFILES_ROOT: ./dotfiles
  BINFILES_ROOT: ./bin
  VSCODEFILES_ROOT: ./vscode
  ST3FILES_ROOT: ./st3
  ENVFILES_ROOT: ./env
  DOTFILES_HOME: ~

tasks:
  default:
    cmds:
      - ./bin/task -l

  install:
    desc: "Runs tasks: binfiles, dotfiles"
    cmds:
      - cmd: |
          echo -n -e "Tasks to be run:\n- dotfiles\n- binfiles\n\n Do you want continue? [Y/n] " 
          read answer
          [[ "$answer" == "Y" || "$answer" == "y" ]] || { echo "Canceled by user"; exit 1; }
          exit 0
      - task: binfiles
      - task: dotfiles

  dotfiles:
    desc: Installs dot files
    cmds:
      - cmd: |
          dotfiles=({{.DOTFILES}})
          for f in "${dotfiles[@]}"; do
            s=$(realpath "$DOTFILES_ROOT/$f")
            d="${HOME}/${DOTFILES_HOME#"~"}.$f"
            if [[ "$f" =~ / ]]; then
              mkdir -p "$(dirname $d)"
            fi
            [[ -d "$d" ]] && rm -rf "$d"
            [[ -f "$d" || -h "$d" ]] && unlink "$d"
            ln -vsf "$s" "$d"
          done

  binfiles:
    desc: Installs bin files
    cmds:
      - cmd: |
          mkdir -p "${HOME}/${DOTFILES_HOME#"~"}bin"
          binfiles=({{.BINFILES}})
          for f in "${binfiles[@]}"; do
            s=$(realpath "$BINFILES_ROOT/$f")
            d="${HOME}/${DOTFILES_HOME#"~"}bin/$f"
            [[ -f "$d" || -h "$d" ]] && unlink "$d"
            ln -vsf "$s" "$d"
            chmod a+x "$d"
          done

  vscode:settings:
    desc: Installs VS Code settings
    cmds:
      - cmd: |
          f="settings.json"
          s=$(realpath "$VSCODEFILES_ROOT/$f")
          d="${HOME}/${DOTFILES_HOME#"~"}Library/Application Support/Code/User/$f"
          mkdir -p "$(dirname "$d")"
          unlink "$d"
          ln -vsf "$s" "$d"

  vscode:extenstions:
    desc: Installs VS code extenstions
    cmds:
      - cmd: |
          exts=({{.VSCODEEXTENSIONS}})
          vsbin=$(command -v code)
          [[ -z "$vsbin" ]] && { echo "VS Code binary not found!"; exit 1; }
          for e in "${exts[@]}"; do
            "$vsbin" --install-extension $e
          done

  vim:vundle:
    desc: Installs VIM's Vundle package mamager
    cmds:
      - cmd: |
          vimDir="${HOME}/${DOTFILES_HOME#"~"}.vim"
          vundleDir="${vimDir}/bundle"
          [[ -h "$vundleDir" ]] && unlink "$vundleDir"
          [[ -d "$vundleDir" ]] && rm -rf "$vundleDir"
          mkdir -p "$vundleDir"
          git clone {{.VIM_VUNDLE_REPO}} "${vundleDir}/Vundle.vim"

  sublime:settings:
    desc: Installs SublimeText settings
    cmds:
      - cmd: |
          stDir="${HOME}/${DOTFILES_HOME#"~"}/Library/Application Support/Sublime Text 3/Packages/User"
          stFiles=({{.SUBLIME_FILES}})
          mkdir -p "$stDir"
          for f in "${stFiles[@]}"; do
            s=$(realpath "$ST3FILES_ROOT/$f")
            d="$stDir/$f"
            [[ -h "$d" || -f "$d" ]] && unlink "$d" 
            ln -vsf "$s" "$d"
          done

  sublime:packagecontrol:
    desc: Installs ST3 package control
    cmds:
      - cmd: |
          stDir="${HOME}/${DOTFILES_HOME#"~"}/Library/Application Support/Sublime Text 3/Installed Packages"
          stPmPath="$stDir/Package Control.sublime-package"
          [[ -f "$stPmPath" ]] && { echo "Sublime Package Control already installed! :)"; exit 0; }
          mkdir -p "$stDir"
          cd "$stDir"
          wget https://sublime.wbond.net/Package%20Control.sublime-package -O 'Package Control.sublime-package'
          cd "${OLD_PWD#"-"}"

  env:load:dotenv:
    cmds:
      - |
        DOTENV="${ENVFILES_ROOT}/{{.DIR}}/.env"
        DOTENV_SHELL_LOADER_SAVED_OPTS=$(set +o)
        set -o allexport
        test -f "${DOTENV}" && source "${DOTENV}"
        set +o allexport
        eval "$DOTENV_SHELL_LOADER_SAVED_OPTS"
        unset DOTENV_SHELL_LOADER_SAVED_OPTS
        {{.EVAL}}

  env:python:
    desc: Installs pyenv
    status:
      - test -d ~/.pyenv
    cmds:
      - curl https://pyenv.run | bash
      - source ~/.bashrc

  env:python:install:
    desc: Installs Python 3
    env:
      PYVER: "{{.PYVER | default .PYTHON_VER}}"
    cmds:
      - pyenv install $PYVER
      - pyenv local $PYVER
      - source ~/.bashrc
      - python --version

  repo:ppa:php:
    desc: Enables PPA for PHP
    cmds:
      - sudo add-apt-repository -y ppa:ondrej/php
      - sudo apt-get update -y

  repo:rpm:php:
    desc: Enables RPM repos for PHP
    cmds:
      - yum -y update; yum -y install epel-release; yum repolist
      - rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
      - yum repolist; yum -y update

  env:php:composer:
    desc: Install PHP composer
    preconditions:
      - test -f ./env/php/.env
    status:
      - test -f ~/bin/composer
      - test -d ~/.composer/vendor/hirak
    cmds:
      - cmd: |
          curl https://getcomposer.org/composer-stable.phar --create-dirs -o ~/bin/composer
          chmod a+x ~/bin/composer
          composer --version
      - cmd: composer global require hirak/prestissimo -n -o

  env:php:
    desc: Configures PHP env
    preconditions:
      - which composer
    cmds:
      - task: env:load:dotenv
        vars:
          DIR: "{{.PHP_ENV_DIR}}"
          EVAL: |
            set -u
            composer config -g --auth github-oauth.github.com ${GITHUB_TOKEN}
            composer config -g --auth bitbucket-oauth.bitbucket.org ${BITBUCKET_CONSUMER_KEY} ${BITBUCKET_CONSUMER_SECRET}
            set +u

  env:node:
    desc: Install NodeJs env
    status:
      - test -d ~/.nvm
    cmds:
      - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash

  env:node:install:
    desc: Installs a Node version
    env:
      NODEJSVER: "{{.NODEJSVER | default .NODEJS_VER}}"
    cmds:
      - cmd: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" --no-use  
          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          nvm --version
          nvm install $NODEJSVER
          node --version

  tools:lfm:
    desc: Installs LFM (https://inigo.katxi.org/devel/lfm/)
    status:
      - which lfm
    cmds:
      - pip install --upgrade pip
      - pip install --user lfm

  tools:git:lfs:
    desc: Installs git-lfs
    status:
      - which git-lfs
    cmds:
      - |
        latestVer=$(curl -s -o /dev/null https://github.com/git-lfs/git-lfs/releases/latest/ -w "%{redirect_url}" | sed -Ee 's/.*(v[[:digit:]]+.[[:digit:]]+.[[:digit:]])/\1/g')
        asset="git-lfs-{{OS}}-{{ARCH}}-${latestVer}"
        curl -L https://github.com/git-lfs/git-lfs/releases/download/${latestVer}/${asset}.tar.gz -o /tmp/${asset}.tar.gz
        cd /tmp; tar xzvf "${asset}.tar.gz"
        mv -v /tmp/git-lfs ~/bin/

  tools:shell:powerline-go:
    desc: Installs latest powerline-go
    status:
      - which powerline-go
    cmds:
      - cmd: |
          platAsset="powerline-go-{{OS}}-{{ARCH}}"
          url="https://github.com/justjanne/powerline-go/releases/latest/download/$platAsset"
          curl -L "${url}" -o ~/bin/powerline-go || { echo "ERROR"; return; }
          chmod a+x ~/bin/powerline-go && echo -e "Done!" ~/bin/powerline-go

  shell:completions:
    desc: Installs various completions files
    summary: |
      Docker's one on MAC OS X from Docker.app
    cmds:
      - ln -sf /Applications/Docker.app/Contents/Resources/etc/docker-compose.bash-completion ${BASH_COMPLETION_COMPAT_DIR}/
      - ln -sf /Applications/Docker.app/Contents/Resources/etc/docker-machine.bash-completion ${BASH_COMPLETION_COMPAT_DIR}/
      - ln -sf /Applications/Docker.app/Contents/Resources/etc/docker.bash-completion ${BASH_COMPLETION_COMPAT_DIR}/

  tools:shell:colr-sh:
    desc: Installs colr.sh lib
    summary: |
      https://github.com/welbornprod/colr.sh
    status:
      - test -f ~/bin/colr
    cmds:
      - curl https://raw.githubusercontent.com/welbornprod/colr.sh/dev/colr.sh -o ~/bin/colr
      - chmod a+x ~/bin/colr

  tools:shell:base16-shell:
    desc: Installs base16-shell themes
    summary: |
      https://github.com/chriskempson/base16-shell
    status:
      - test -d ~/.config/base16-shell
    cmds:
      - cmd: |
          [[ -d ~/.config/base16-shell ]] && rm -rf ~/.config/base16-shell
          git clone https://github.com/chriskempson/base16-shell.git ~/.config/base16-shell
