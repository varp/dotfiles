# ex: filetype=sh

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend dirspell cdable_vars cdspell direxpand huponexit no_empty_cmd_completion nocaseglob autocd

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=500

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color) color_prompt=yes ;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        # We have color support; assume it's compliant with Ecma-48
        # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
        # a case would tend to support setf rather than setaf.)
        color_prompt=yes
    else
        color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*) ;;

esac

## PATH without duplicates
#################################
_dedup_path() {
    PATH=$(echo -e ${PATH//:/'\n'} | awk '{printf("%d|%s\n", NR, $0)}' | sort -t '|' -k 2 -u | sort -t '|' -k 1 -g | cut -f2 -d'|')
    export PATH=${PATH//[$'\n']/:}
}

_prepend_to_path() {
    # [ "${PATH#*$1:}" == "$PATH" ] && {
    [ -z "$(echo $PATH | tr ':' '\n' | grep -e "${1/#\~/$HOME}")" ] && {
        export PATH="$1:$PATH"
        _dedup_path
    }
}

_append_to_path() {
    [ -z "$(echo $PATH | tr ':' '\n' | grep -e "${1/#\~/$HOME}")" ] && {
        export PATH="$PATH:$1"
        _dedup_path
    }
}

_OLDPATH="$PATH"
export PATH="$(command -p getconf PATH)"
_dedup_path
#################################

## load bash env
if [ -f ~/.bash_env ]; then
    . ~/.bash_env
fi

# library functions
if [ -f ~/.bash_functions ]; then
    . ~/.bash_functions
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

# Load NVM (Node Version Manager)
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

# Load Python Version Manager
export PYENV_ROOT="$HOME/.pyenv"
_prepend_to_path "$PYENV_ROOT/bin"

[ -d "$PYENV_ROOT" ] && {
    eval "$(pyenv init --path)"
    eval "$(pyenv init -)"
    _prepend_to_path "$HOME/.local/bin"
}

USE_GOENV=false

if $USE_GOENV; then
    # Goenv
    export GOENV_ROOT="$HOME/.goenv"
    [[ -s "$GOENV_ROOT/bin/goenv" ]] && {
        eval "$(goenv init -)"
        _prepend_to_path "$GOENV_ROOT/bin"

        export GOROOT="$(go env GOROOT)"
        export GOPATH="$(go env GOPATH)"

        _prepend_to_path "$GOROOT/bin"
        _prepend_to_path "$GOPATH/bin"
    }

else

    # Go Version Manager
    [[ -s "$HOME/.gvm/scripts/gvm" ]] && . "$HOME/.gvm/scripts/gvm"
    [[ -s "$HOME/.gvm/scripts/completion" ]] && . "$HOME/.gvm/scripts/completion"
fi

## RVM
[[ -s "$HOME/.rvm/scripts/rvm" ]] && {
    . "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
    # Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
    _prepend_to_path "$HOME/.rvm/bin"
}

## Composer

command -v composer >/dev/null && {
    _prepend_to_path "$HOME/.composer/vendor/bin"
    # command -v symfony-autocomplete >/dev/null && eval "$(symfony-autocomplete)"
}

## OSX

if [[ "$_OS_NAME" == "Darwin" ]]; then

    export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"

    [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

    [[ -r '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc' ]] && . '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.bash.inc'

    # The next line enables shell command completion for gcloud.
    [[ -r '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc' ]] && . '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.bash.inc'

    # The next line updates PATH for Yandex Cloud CLI.
    [ -f "$HOME/yandex-cloud/path.bash.inc" ] && . "$HOME/yandex-cloud/path.bash.inc"

    # The next line enables shell command completion for yc.
    [ -f "$HOME/yandex-cloud/completion.bash.inc" ] && . "$HOME/yandex-cloud/completion.bash.inc"
fi

# Base16 Shell
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] &&
    [ -s "$BASE16_SHELL/profile_helper.sh" ] &&
    eval "$("$BASE16_SHELL/profile_helper.sh")"

[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion" # This loads nvm bash_completion

#### PATH without duplicates
_dedup_path
#################################
