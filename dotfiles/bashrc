
# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=500
HISTFILESIZE=200

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac



## load bash env
if [ -f ~/.bash_env ]; then
    . ~/.bash_env
fi


# library functions
if [ -f ~/.bash_functions ]; then
   .  ~/.bash_functions
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


[[ "$_SHELL_NAME" == "bash" && -s ~/.aliases_completions ]] && source ~/.aliases_completions


# The next line enables shell command completion for gcloud.
if [ -f "$HOME/code/google-cloud-sdk/completion.bash.inc" ]; then . "$HOME/code/google-cloud-sdk/completion.bash.inc"; fi


## OSX
if [[ "$_OS_NAME" == "Darwin" ]]; then
   [[ -r /usr/local/etc/profile.d/bash_completion.sh ]] && . /usr/local/etc/profile.d/bash_completion.sh
fi

## iTerm integration
if [ -n "$SSH_CONNECTION" ] && [ -f ~/.iterm2_shell_integration.bash ]; then
   . ~/.iterm2_shell_integration.bash
fi


# Terminal options
## truncate PWD
_pwd_short() {
    echo ${PWD/#$HOME/\~} | sed -E 's!([^/.|^/])[^/]+/!\1/!g'
}



## prompt
if [[ `whoami` == "root" ]]; then
  PS1="${debian_chroot:+($debian_chroot)}\[\e[104m\]\A\[\e[0m\] \[\e[41m\]\u@\H\[\e[0m\] @ \w \n\[\e[41m\]#\[\e[0m\] "
else
  PS1="${debian_chroot:+($debian_chroot)}\[\e[104m\]\t\[\e[0m\]\[\e[46m\] \u \[\e[0m\]\[\e[44m\] \w \[\e[0m\]\[\e[47m\]\[\e[0;33;47m\]\$(parse_git_branch)\[\e[0;0m\]\[\e[1;34;47m\]$(parse_languages)\[\e[0;0m\]\$ "
fi


function _update_ps1() {

    mods="time,cwd,dotenv,perms,gitlite,ssh,jobs,exit,root"
    args=""

    local _langs=$(parse_languages)
    [ -n "$_langs" ] && export _LANGS_ENV=$_langs

    if [ -n "$_langs" ]; then
        mods="time,cwd,dotenv,perms,gitlite,shell-var,jobs,exit,root"
        args="-cwd-max-depth 3 -shell-var _LANGS_ENV"
    fi

    if [ -n "$SSH_CONNECTION" ]; then
        if [ -n "$_langs" ]; then
            args="-cwd-max-depth 1 -shell-var _LANGS_ENV"
            mods="termtitle,time,cwd,perms,load,shell-var,dotenv,host,user,jobs,exit,ssh,root"
        else
            args="-cwd-max-depth 1"
            mods="termtitle,time,cwd,perms,load,dotenv,host,user,jobs,exit,ssh,root"
        fi
    fi


    eval "$(/usr/local/bin/powerline-go -error $? -shell bash -eval -modules ${mods} ${args})"
}

if [ "$TERM" != "linux" ] && [ -f /usr/local/bin/powerline-go ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi


# Load NVM (Node Version Manager)
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"  # This loads nvm bash_completion



# Load Python Version Manager
export PYENV_ROOT="$HOME/.pyenv"
export PATH; PATH="$PYENV_ROOT/bin:$PATH"
[ -d "$PYENV_ROOT" ] && eval "$(pyenv init -)"
export PATH; PATH="$HOME/.local/bin:$PATH"


# Goenv
export GOENV_ROOT="$HOME/.goenv"
export PATH; PATH="$GOENV_ROOT/bin:$PATH"
[[ -s "$GOENV_ROOT/bin/goenv" ]] && eval "$(goenv init -)"

export GOROOT="$(go env GOROOT)"
export GOPATH="$(go env GOPATH)"

export PATH; PATH="$GOROOT/bin:$PATH"
export PATH; PATH="$GOPATH/bin:$PATH"


