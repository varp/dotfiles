# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias upgrade='sudo apt-get update && sudo apt-get upgrade -y'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi


parse_git_branch() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

parse_node_version_nvm() {
    [ $NVM_BIN ] && echo $NVM_BIN | sed -e 's/.*\(v[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/(node \1)/ig'
}

parse_ruby_version() {
    [ $RUBY_VERSION ] && echo $RUBY_VERSION | sed -e 's/\(.*\)/(\1)/'
}

mount_vbox_share() {
  [ -z $# ] && echo "You have to supply mount point"

  local VBOX_SHARE=$1
  if [ -z $2 ]
  then
    local MOUNT_POINT=$VBOX_SHARE
  else
    local MOUNT_POINT=$2
  fi

  local WHOAMI=$(whoami)
  local WUID=$(id -u $WHOAMI)
  local WGID=$(id -g $WHOAMI)

  [ ! -d $MOUNT_POINT ] && mkdir $MOUNT_POINT

  VBOX_SHARE_MOUNT_POINT="`pwd`/$MOUNT_POINT"
  export VBOX_SHARE_MOUNT_POINT

  sudo mount -t vboxsf -o rw,uid=$WUID,gid=$WGID $VBOX_SHARE $VBOX_SHARE_MOUNT_POINT && echo "$VBOX_SHARE share succesfully mounted!" && return 0
  echo "Something goes wrong!" && return 1
}

umount_vbox_share() {
  [ -z $# ] && echo "You have to supply VirtualBox shared folder name"

  local VBOX_SHARE=$1

  sudo umount $VBOX_SHARE && echo "$VBOX_SHARE shared folder successfully unmounted"

  if [ ! -z $VBOX_SHARE_MOUNT_POINT -a -d $VBOX_SHARE_MOUNT_POINT ]
  then
    rmdir $VBOX_SHARE_MOUNT_POINT
    unset VBOX_SHARE_MOUNT_POINT
    return 0
  fi
  echo "Something goes wrong!" && return 1
}

# Terminal options
#
if [[ `whoami` == "root" ]]; then
  PS1="\h # "
else
  PS1="\h:\w\[\e[0;33;49m\]\$(parse_git_branch)\[\e[0;0m\]\[\e[1;34m\]\$(parse_node_version_nvm)\[\e[1;34m\]\$(parse_ruby_version)\[\e[0;0m\]$ "
fi
PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

# Load RVM (Ruby version manager)
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm"
# Load NVM (Node Version Manager)
[ -s $HOME/.nvm/nvm.sh ] && . $HOME/.nvm/nvm.sh # This loads NVM
# Load Python virtualenv
[ -s /usr/local/bin/virtualenvwrapper.sh ] && . /usr/local/bin/virtualenvwrapper.sh


## Ubuntu packaging
export DEBFULLNAME="Vardan Pogosyan"
export DEBEMAIL="vardan.pogosyan@gmail.com"

alias mvbsf='mount_vbox_share'
alias umvbsf='umount_vbox_share'

alias nst='sudo netstat -lntp'
