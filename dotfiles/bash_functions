#
# prompt

parse_git_uncommited_changes() {
  uncommited=$(git status --porcelain 2>&1 | grep -v ^fatal | grep -v ^?? | wc -l)
  unstaged=$(git status --porcelain 2>&1 | grep -v ^fatal | grep ^?? | wc -l)

  res=""
  [[ $uncommited -gt 0 ]] && res="$res*"
  [[ $unstaged -gt 0 ]] && res="$res*"

  [[ ! -z "$res" ]] && echo " $res"
}

parse_git_branch() {
  branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  [[ ! -z "$branch" ]] && echo "($branch$(parse_git_uncommited_changes))"
}

parse_node_version_nvm() {
  [[ -n "$NVM_BIN" || -f package.json || -d node_modules || -f *.js ]] || return
  [ $NVM_BIN ] && echo $NVM_BIN | sed -E -e 's@.*v([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*@\1@g'
}

parse_ruby_version() {
  [[ -f Gemfile || -f Rakefile || -f *.rb ]] || return
  [ $RUBY_VERSION ] && echo $RUBY_VERSION | sed -e 's/ruby\-\(.*\)/rb\1/'
}

parse_python_version() {
  [[ -n "$PYENV_VERSION" || -f .python-version || -f requirements.txt || -f pyproject.toml || -f *.py ]] || return
  [ -d "$HOME/.pyenv" ] && pyenv version | sed -e 's/\( (.*)\)//' -e 's/\(.*\)/\1/'
}

parse_php_version(){
  [[ -f *.php || -f composer.json ]] || return
  [ -n "$(which php)" ] && php -v | sed -nE -e '1 s/PHP ([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*/\1/p'
}

parse_go_version() {
  # see: https://github.com/denysdovhan/spaceship-prompt/blob/master/sections/golang.zsh
  [[ -n "$gvm_go_name" || -f go.mod || -d Godeps || -f glide.yaml || -f *.go || -f Gopkg.toml || -f Gopkg.lock \
  || ( $GOPATH && "$PWD/" =~ "$GOPATH/" ) ]] || return
  go version | awk '{ if ($3 ~ /^devel/) {print $3 ":" substr($4, 2)} else {print "v" substr($3, 3)} }'
}

parse_languages() {

  ruby_symbol='üíé'
  node_symbol='‚¨¢'
  pyenv_symbol='üêç'
  php_symbol='üêò'
  go_symbol='üêº'


  node_ver=$(parse_node_version_nvm)
  ruby_ver=$(parse_ruby_version)
  python_ver=$(parse_python_version)
  php_ver=$(parse_php_version)
  go_ver=$(parse_go_version)

  langs=( )

  [ -n "$node_ver" ] && export _LANG_ENV_NODE=$node_ver && langs+=("$node_symbol $node_ver" )
  [ -n "$python_ver" ] && export _LANG_ENV_PYTHON=$python_ver && langs+=("$pyenv_symbol $python_ver" )
  [ -n "$ruby_ver" ] && export _LANG_ENV_RUBY=$ruby_ver && langs+=("$ruby_symbol $ruby_ver" )
  [ -n "$php_ver" ] && export _LANG_ENV_PHP=$php_ver && langs+=("$php_symbol $php_ver" )
  [ -n "$go_ver" ] && export _LANG_ENV_GO=$go_ver && langs+=("$go_symbol $go_ver" )
  

  echo "[${langs[@]}]"

}


to_timestamp() {
  if [[ $# -eq 0 || $# -lt 6 ]]; then
    echo "usage: to_timestamp <year> <month> <day> <hour> <minute> <sec>"
    return
  fi

  python -c "import datetime; print(datetime.datetime($1, $2, $3, $4, $5, $6).timestamp())"
}

from_timestamp() {
  if [[ $# -eq 0 ]]; then
    echo "usage: from_timestamp <timestamp>"
    return
  fi

  python -c "import datetime; print(datetime.datetime.fromtimestamp($1))"
}

sshmount() {
  mkdir -p "~/Volumes/$1"
  sshfs user@$1:/ "~/Volumes/$1" -ovolname=$1 -onoappledouble -onoapplexattr && open "~/Volumes/$1"
}

## Powerline GO

download_latest_pgo() {

    downFolder="${1:-$HOME}"

    plat="$(uname -s | tr [:upper:] [:lower:])"
    platAsset="powerline-go-${plat}-amd64"
    url="https://github.com/justjanne/powerline-go/releases/latest/download/$platAsset"
    wget -q "${url}" -O "${downFolder}/powerline-go" || { echo "ERROR"; return; }
    chmod a+x "${downFolder}/powerline-go" && echo -e "Done! ${downFolder}/powerline-go\n"
}

macchanger() {
  if [[ $# -eq 0 ]]; then
    IFACE="en0"
  else
    IFACE="$1"
  fi

  sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport --disassociate
  sudo ifconfig $IFACE ether $(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/./0/2; s/.$//')
  networksetup -detectnewhardware
}


goinside()
{
    docker-compose exec -e SHELL=bash $1 bash -c "stty cols $COLUMNS rows $LINES && bash"
}
_goinside()
{
    COMPREPLY=( $(docker-compose ps --services) )
}
complete -F _goinside goinside

[[ "$_SHELL_NAME" == "bash" ]] && export -f goinside
