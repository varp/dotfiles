#
# prompt

parse_git_uncommited_changes() {
  uncommited=$(git status --porcelain 2>&1 | grep -v ^fatal | grep -v ^?? | wc -l)
  unstaged=$(git status --porcelain 2>&1 | grep -v ^fatal | grep ^?? | wc -l)

  res=""
  [[ $uncommited -gt 0 ]] && res="$res*"
  [[ $unstaged -gt 0 ]] && res="$res*"

  [[ ! -z "$res" ]] && echo " $res"
}

parse_git_branch() {
  branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  [[ ! -z "$branch" ]] && echo "($branch$(parse_git_uncommited_changes))"
}

parse_node_version_nvm() {
  [ $NVM_BIN ] && echo $NVM_BIN | sed -E -e 's@.*v([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*@js\1@g'
}

parse_ruby_version() {
  [ $RUBY_VERSION ] && echo $RUBY_VERSION | sed -e 's/ruby\-\(.*\)/rb\1/'
}

parse_python_version() {
  [ -d "$HOME/.pyenv" ] && pyenv version | sed -e 's/\( (.*)\)//' -e 's/\(.*\)/py\1/'
}

parse_languages() {
  langs=""

  node_ver=$(parse_node_version_nvm)
  ruby_ver=$(parse_ruby_version)
  python_ver=$(parse_python_version)

  [[ ! -z "$node_ver" ]] && {
    [[ -z "$langs" ]] && langs="$langs$node_ver" || langs="$langs $node_ver"
  }
  [[ ! -z "$ruby_ver" ]] && {
    [[ -z "$langs" ]] &&  langs="$langs$ruby_ver" || langs="$langs $ruby_ver"
  }
  [[ ! -z "$python_ver" ]] && {
    [[ -z "$langs" ]] &&  langs="$langs$python_ver" || langs="$langs $python_ver"
  }

  echo "[$langs]"
}



mount_vbox_share() {
  [ -z $# ] && echo "You have to supply mount point"

  local VBOX_SHARE=$1
  if [ -z $2 ]
  then
    local MOUNT_POINT=$VBOX_SHARE
  else
    local MOUNT_POINT=$2
  fi

  local WHOAMI=$(whoami)
  local WUID=$(id -u $WHOAMI)
  local WGID=$(id -g $WHOAMI)

  [ ! -d $MOUNT_POINT ] && mkdir $MOUNT_POINT

  VBOX_SHARE_MOUNT_POINT="`pwd`/$MOUNT_POINT"
  export VBOX_SHARE_MOUNT_POINT

  sudo mount -t vboxsf -o rw,uid=$WUID,gid=$WGID $VBOX_SHARE $VBOX_SHARE_MOUNT_POINT && echo "$VBOX_SHARE share succesfully mounted!" && return 0
  echo "Something goes wrong!" && return 1
}

umount_vbox_share() {
  [ -z $# ] && echo "You have to supply VirtualBox shared folder name"

  local VBOX_SHARE=$1

  sudo umount $VBOX_SHARE && echo "$VBOX_SHARE shared folder successfully unmounted"

  if [ ! -z $VBOX_SHARE_MOUNT_POINT -a -d $VBOX_SHARE_MOUNT_POINT ]
  then
    rmdir $VBOX_SHARE_MOUNT_POINT
    unset VBOX_SHARE_MOUNT_POINT
    return 0
  fi
  echo "Something goes wrong!" && return 1
}


to_timestamp() {
  if [[ $# -eq 0 || $# -lt 6 ]]; then
    echo "usage: to_timestamp <year> <month> <day> <hour> <minute> <sec>"
    return
  fi

  python -c "import datetime; print(datetime.datetime($1, $2, $3, $4, $5, $6).timestamp())"
}

from_timestamp() {
  if [[ $# -eq 0 ]]; then
    echo "usage: from_timestamp <timestamp>"
    return
  fi

  python -c "import datetime; print(datetime.datetime.fromtimestamp($1))"
}

sshmount() {
  mkdir -p "~/Volumes/$1"
  sshfs user@$1:/ "~/Volumes/$1" -ovolname=$1 -onoappledouble -onoapplexattr && open "~/Volumes/$1"
}


macchanger() {
  if [[ $# -eq 0 ]]; then
    IFACE="en0"
  else
    IFACE="$1"
  fi

  sudo /System/Library/PrivateFrameworks/Apple80211.framework/Resources/airport --disassociate
  sudo ifconfig $IFACE ether $(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/./0/2; s/.$//')
  networksetup -detectnewhardware
}


goinside(){
    docker exec -e SHELL=bash -it $1 bash -c "stty cols $COLUMNS rows $LINES && bash";
}
_goinside(){
    COMPREPLY=( $(docker ps --format "{{.Names}}" -f name=$2) );
}
complete -F _goinside goinside;
export -f goinside;

download()
{
  cat <<END

~C
-R 8821:localhost:22

END

  set -x

  scp -P 8821 "$@" localhost:~/Downloads/
}
